from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from math_tutor import MathTutor
from bot.keyboards.levels import get_levels_keyboard
from bot.keyboards.main_menu import get_main_menu

router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class MathTraining(StatesGroup):
    waiting_for_level = State()
    waiting_for_decomposition = State()
    waiting_for_answer = State()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}


@router.message(lambda message: message.text in ["–õ–µ–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–°–ª–æ–∂–Ω—ã–π"])
async def select_level(message: types.Message, state: FSMContext):
    level = message.text
    tutor = MathTutor(level)
    user_sessions[message.from_user.id] = {
        "tutor": tutor,
        "level": level,
        "attempts": 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    }

    await state.set_state(MathTraining.waiting_for_decomposition)
    await message.answer(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {tutor.max_attempts}")
    await generate_example(message, state)


async def generate_example(message: types.Message, state: FSMContext):
    user_data = user_sessions.get(message.from_user.id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=get_levels_keyboard())
        await state.set_state(MathTraining.waiting_for_level)
        return

    tutor = user_data["tutor"]
    a, b, op, needs_decomp = tutor.generate_example()
    result = tutor.calculate(a, b, op)

    parts = 0
    if needs_decomp:
        parts = tutor.decompose(a, b, op)
        if op == '+' and parts[0] == 0:
            needs_decomp = False

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data["current_example"] = {
        "a": a, "b": b, "op": op,
        "result": result, "needs_decomp": needs_decomp,
        "parts": parts
    }

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    user_data["attempts"] = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    example_text = f"–ü—Ä–∏–º–µ—Ä: {a} {op} {b}"

    if needs_decomp:
        hint_text = f"–†–∞–∑–±–µ–π {b} –Ω–∞ {parts[0]} –∏ {parts[1]}"

        if tutor.hint_mode == "always":
            example_text += f"\n{hint_text}"
        elif tutor.hint_mode == "on_request":
            example_text += "\n–ù–∞–ø–∏—à–∏ '–ø–æ–¥—Å–∫–∞–∑–∫–∞' –¥–ª—è –ø–æ–º–æ—â–∏"

        await message.answer(example_text, reply_markup=types.ReplyKeyboardRemove())
        await message.answer("–í–≤–µ–¥–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ")
        await state.set_state(MathTraining.waiting_for_decomposition)
    else:
        await message.answer(example_text, reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(MathTraining.waiting_for_answer)


@router.message(MathTraining.waiting_for_decomposition)
async def handle_decomposition(message: types.Message, state: FSMContext, attempts=0):
    user_data = user_sessions.get(message.from_user.id)
    if not user_data or "current_example" not in user_data:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_menu())
        await state.clear()
        return

    example = user_data["current_example"]
    tutor = user_data["tutor"]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts = user_data.get("attempts", 0)

    hint_text = f"–†–∞–∑–±–µ–π {example['b']} –Ω–∞ {example['parts'][0]} –∏ {example['parts'][1]}"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if message.text.lower() == '–ø–æ–¥—Å–∫–∞–∑–∫–∞' and tutor.hint_mode == 'on_request':
        await message.answer(hint_text)
        await message.answer("–í–≤–µ–¥–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç
    try:
        user_answer = int(message.text)
        if user_answer == example["result"]:
            await message.answer(f"üåü –û—Ç–ª–∏—á–Ω–æ! {example['a']} {example['op']} {example['b']} = {example['result']}")
            await message.answer("–•–æ—á–µ—à—å –µ—â–µ –ø—Ä–∏–º–µ—Ä?", reply_markup=get_main_menu())
            await state.clear()
            return
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Ä–∞–∑–±–∏—Ç—å —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
            await message.answer("–í–≤–µ–¥–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
            return
    except ValueError:
        pass  # –ù–µ —á–∏—Å–ª–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–±–∏–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    if tutor.validate_decomposition(message.text, example['parts']):
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ—Å—á–∏—Ç–∞–µ–º –ø–æ —à–∞–≥–∞–º.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if example['op'] == '-':
            await message.answer(
                f"{example['a']} - {example['b']} = {example['a']} - ({example['parts'][0]} + {example['parts'][1]})")
            await message.answer(
                f"–®–∞–≥ 1: {example['a']} - {example['parts'][0]} = {example['a'] - example['parts'][0]}")
            await message.answer(f"–®–∞–≥ 2: {example['a'] - example['parts'][0]} - {example['parts'][1]} = ?")
        else:
            await message.answer(
                f"{example['a']} + {example['b']} = {example['a']} + ({example['parts'][0]} + {example['parts'][1]})")
            await message.answer(
                f"–®–∞–≥ 1: {example['a']} + {example['parts'][0]} = {example['a'] + example['parts'][0]}")
            await message.answer(f"–®–∞–≥ 2: {example['a'] + example['parts'][0]} + {example['parts'][1]} = ?")

        await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å?")
        await state.set_state(MathTraining.waiting_for_answer)
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        attempts += 1
        user_data["attempts"] = attempts

        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ {attempts} –∏–∑ {tutor.max_attempts}")

        if attempts < tutor.max_attempts:
            if tutor.hint_mode == "on_error" or tutor.hint_mode == "always":
                await message.answer(hint_text)
            await message.answer("–í–≤–µ–¥–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ (–¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        else:
            await message.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: {example['parts'][0]} –∏ {example['parts'][1]}")
            await message.answer("–•–æ—á–µ—à—å –µ—â–µ –ø—Ä–∏–º–µ—Ä?", reply_markup=get_main_menu())
            await state.clear()


@router.message(MathTraining.waiting_for_answer)
async def handle_answer(message: types.Message, state: FSMContext):
    user_data = user_sessions.get(message.from_user.id)
    if not user_data or "current_example" not in user_data:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_main_menu())
        await state.clear()
        return

    example = user_data["current_example"]

    try:
        user_answer = int(message.text)
        if user_answer == example["result"]:
            await message.answer(f"üåü –û—Ç–ª–∏—á–Ω–æ! {example['a']} {example['op']} {example['b']} = {example['result']}")
        else:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {example['result']}")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
        await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å?")
        return

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
    await message.answer("–•–æ—á–µ—à—å –µ—â–µ –ø—Ä–∏–º–µ—Ä?", reply_markup=get_main_menu())
    await state.clear()


@router.message(lambda message: message.text and message.text.lower() == "–Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä")
async def new_example(message: types.Message, state: FSMContext):
    user_data = user_sessions.get(message.from_user.id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=get_levels_keyboard())
        await state.set_state(MathTraining.waiting_for_level)
        return

    await state.set_state(MathTraining.waiting_for_decomposition)
    await generate_example(message, state)


@router.message(lambda message: message.text and message.text.lower() == "—Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å")
async def change_level(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=get_levels_keyboard())
    await state.set_state(MathTraining.waiting_for_level)
